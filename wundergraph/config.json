{"engineConfig":{"defaultFlushInterval":"500","datasourceConfigurations":[{"kind":"GRAPHQL","rootNodes":[{"typeName":"Mutation","fieldNames":["setFavouriteForUser"]},{"typeName":"Query","fieldNames":["character","characters","charactersByIds","location","locations","locationsByIds","episode","episodes","episodesByIds","favouriteById"]}],"childNodes":[{"typeName":"Character","fieldNames":["id","name","status","species","type","gender","origin","location","image","episode","created"]},{"typeName":"Characters","fieldNames":["info","results"]},{"typeName":"Episode","fieldNames":["id","name","air_date","episode","characters","created"]},{"typeName":"Episodes","fieldNames":["info","results"]},{"typeName":"Favourite","fieldNames":["user_id","update_date","character_id"]},{"typeName":"Info","fieldNames":["count","pages","next","prev"]},{"typeName":"Location","fieldNames":["id","name","type","dimension","residents","created"]},{"typeName":"Locations","fieldNames":["info","results"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://ramapi-service.default.svc.cluster.local:8082/graphql"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://ramapi-service.default.svc.cluster.local:8082/graphql"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"},"federation":{"enabled":true,"serviceSdl":"directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE\n\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"The variable name to export this field as.\"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"Specify the store key.\"\"\"\n  key: String!\n\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n) on FIELD\n\nenum CacheControlScope {\n  PUBLIC\n  PRIVATE\n}\n\ntype Character {\n  \"\"\"The id of the character.\"\"\"\n  id: ID\n\n  \"\"\"The name of the character.\"\"\"\n  name: String\n\n  \"\"\"The status of the character ('Alive', 'Dead' or 'unknown').\"\"\"\n  status: String\n\n  \"\"\"The species of the character.\"\"\"\n  species: String\n\n  \"\"\"The type or subspecies of the character.\"\"\"\n  type: String\n\n  \"\"\"\n  The gender of the character ('Female', 'Male', 'Genderless' or 'unknown').\n  \"\"\"\n  gender: String\n\n  \"\"\"The character's origin location\"\"\"\n  origin: Location\n\n  \"\"\"The character's last known location\"\"\"\n  location: Location\n\n  \"\"\"\n  Link to the character's image.\n  All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.\n  \"\"\"\n  image: String\n\n  \"\"\"Episodes in which this character appeared.\"\"\"\n  episode: [Episode]!\n\n  \"\"\"Time at which the character was created in the database.\"\"\"\n  created: String\n}\n\ntype Characters {\n  info: Info\n  results: [Character]\n}\n\ntype Episode {\n  \"\"\"The id of the episode.\"\"\"\n  id: ID\n\n  \"\"\"The name of the episode.\"\"\"\n  name: String\n\n  \"\"\"The air date of the episode.\"\"\"\n  air_date: String\n\n  \"\"\"The code of the episode.\"\"\"\n  episode: String\n\n  \"\"\"List of characters who have been seen in the episode.\"\"\"\n  characters: [Character]!\n\n  \"\"\"Time at which the episode was created in the database.\"\"\"\n  created: String\n}\n\ntype Episodes {\n  info: Info\n  results: [Episode]\n}\n\ntype Favourite {\n  user_id: String\n  update_date: String\n  character_id: Int\n}\n\ninput FilterCharacter {\n  name: String\n  status: String\n  species: String\n  type: String\n  gender: String\n}\n\ninput FilterEpisode {\n  name: String\n  episode: String\n}\n\ninput FilterLocation {\n  name: String\n  type: String\n  dimension: String\n}\n\ntype Info {\n  \"\"\"The length of the response.\"\"\"\n  count: Int\n\n  \"\"\"The amount of pages.\"\"\"\n  pages: Int\n\n  \"\"\"Number of the next page (if it exists)\"\"\"\n  next: Int\n\n  \"\"\"Number of the previous page (if it exists)\"\"\"\n  prev: Int\n}\n\ntype Location {\n  \"\"\"The id of the location.\"\"\"\n  id: ID\n\n  \"\"\"The name of the location.\"\"\"\n  name: String\n\n  \"\"\"The type of the location.\"\"\"\n  type: String\n\n  \"\"\"The dimension in which the location is located.\"\"\"\n  dimension: String\n\n  \"\"\"List of characters who have been last seen in the location.\"\"\"\n  residents: [Character]!\n\n  \"\"\"Time at which the location was created in the database.\"\"\"\n  created: String\n}\n\ntype Locations {\n  info: Info\n  results: [Location]\n}\n\ntype Mutation {\n  setFavouriteForUser(user_id: String!, character_id: Int!): Favourite\n}\n\ntype Query {\n  \"\"\"Get a specific character by ID\"\"\"\n  character(id: ID!): Character\n\n  \"\"\"Get the list of all characters\"\"\"\n  characters(page: Int, filter: FilterCharacter): Characters\n\n  \"\"\"Get a list of characters selected by ids\"\"\"\n  charactersByIds(ids: [ID!]!): [Character]\n\n  \"\"\"Get a specific locations by ID\"\"\"\n  location(id: ID!): Location\n\n  \"\"\"Get the list of all locations\"\"\"\n  locations(page: Int, filter: FilterLocation): Locations\n\n  \"\"\"Get a list of locations selected by ids\"\"\"\n  locationsByIds(ids: [ID!]!): [Location]\n\n  \"\"\"Get a specific episode by ID\"\"\"\n  episode(id: ID!): Episode\n\n  \"\"\"Get the list of all episodes\"\"\"\n  episodes(page: Int, filter: FilterEpisode): Episodes\n\n  \"\"\"Get a list of episodes selected by ids\"\"\"\n  episodesByIds(ids: [ID!]!): [Episode]\n\n  \"\"\"Get favourite record for user_id\"\"\"\n  favouriteById(user_id: String!): Favourite\n}\n\n\"\"\"The `Upload` scalar type represents a file upload.\"\"\"\nscalar Upload\n"},"upstreamSchema":{"key":"ce32bb5a00e15b692319f90659463b09f51a51b1"}},"requestTimeoutSeconds":"10","id":"0"},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Mutation","fieldNames":["register"]},{"typeName":"Query","fieldNames":["login","isRegistered"]}],"childNodes":[{"typeName":"LoginResult","fieldNames":["isLoggedIn","jwt","reason"]},{"typeName":"User","fieldNames":["id","pw"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://ariadne-service.default.svc.cluster.local:8083"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://ariadne-service.default.svc.cluster.local:8083"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"},"federation":{"enabled":true,"serviceSdl":"\"\"\"Exposes a URL that specifies the behaviour of this scalar.\"\"\"\ndirective @specifiedBy(\n  \"\"\"The URL that specifies the behaviour of this scalar.\"\"\"\n  url: String!\n) on SCALAR\n\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"The variable name to export this field as.\"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"Specify the store key.\"\"\"\n  key: String!\n\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n) on FIELD\n\ntype LoginResult {\n  isLoggedIn: Boolean!\n  jwt: String\n  reason: String\n}\n\ntype Mutation {\n  register(username: String!, password: String!): Boolean!\n}\n\ntype Query {\n  login(username: String!, password: String!): LoginResult!\n  isRegistered(username: String!): Boolean!\n}\n\ntype User {\n  id: String!\n  pw: String!\n}\n"},"upstreamSchema":{"key":"1ecf421caf39a03bd5088ed421e1c52fd3f0917e"}},"requestTimeoutSeconds":"10","id":"1"},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Query","fieldNames":["welcomeMessage"]},{"typeName":"Subscription","fieldNames":["counter"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://ariadnews-svc.default.svc.cluster.local:8083"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://ariadnews-svc.default.svc.cluster.local:8083"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"},"federation":{"enabled":true,"serviceSdl":"\"\"\"Exposes a URL that specifies the behaviour of this scalar.\"\"\"\ndirective @specifiedBy(\n  \"\"\"The URL that specifies the behaviour of this scalar.\"\"\"\n  url: String!\n) on SCALAR\n\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"The variable name to export this field as.\"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"Specify the store key.\"\"\"\n  key: String!\n\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n) on FIELD\n\ntype Query {\n  welcomeMessage: String!\n}\n\ntype Subscription {\n  counter: Int!\n}\n"},"upstreamSchema":{"key":"5f227616db4bb5cca93b236656c18ff9469c186c"}},"requestTimeoutSeconds":"10","id":"2"}],"fieldConfigurations":[{"typeName":"Mutation","fieldName":"setFavouriteForUser","argumentsConfiguration":[{"name":"user_id","sourceType":"FIELD_ARGUMENT"},{"name":"character_id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Mutation","fieldName":"register","argumentsConfiguration":[{"name":"username","sourceType":"FIELD_ARGUMENT"},{"name":"password","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"character","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"characters","argumentsConfiguration":[{"name":"page","sourceType":"FIELD_ARGUMENT"},{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"charactersByIds","argumentsConfiguration":[{"name":"ids","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"location","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"locations","argumentsConfiguration":[{"name":"page","sourceType":"FIELD_ARGUMENT"},{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"locationsByIds","argumentsConfiguration":[{"name":"ids","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"episode","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"episodes","argumentsConfiguration":[{"name":"page","sourceType":"FIELD_ARGUMENT"},{"name":"filter","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"episodesByIds","argumentsConfiguration":[{"name":"ids","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"favouriteById","argumentsConfiguration":[{"name":"user_id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"login","argumentsConfiguration":[{"name":"username","sourceType":"FIELD_ARGUMENT"},{"name":"password","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"isRegistered","argumentsConfiguration":[{"name":"username","sourceType":"FIELD_ARGUMENT"}]}],"graphqlSchema":"directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"The variable name to export this field as.\"\"\"\n  as: String!\n) on FIELD\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"Specify the store key.\"\"\"\n  key: String!\n\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n) on FIELD\n\nenum CacheControlScope {\n  PUBLIC\n  PRIVATE\n}\n\ntype Character {\n  \"\"\"The id of the character.\"\"\"\n  id: ID\n\n  \"\"\"The name of the character.\"\"\"\n  name: String\n\n  \"\"\"The status of the character ('Alive', 'Dead' or 'unknown').\"\"\"\n  status: String\n\n  \"\"\"The species of the character.\"\"\"\n  species: String\n\n  \"\"\"The type or subspecies of the character.\"\"\"\n  type: String\n\n  \"\"\"\n  The gender of the character ('Female', 'Male', 'Genderless' or 'unknown').\n  \"\"\"\n  gender: String\n\n  \"\"\"The character's origin location\"\"\"\n  origin: Location\n\n  \"\"\"The character's last known location\"\"\"\n  location: Location\n\n  \"\"\"\n  Link to the character's image.\n  All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.\n  \"\"\"\n  image: String\n\n  \"\"\"Episodes in which this character appeared.\"\"\"\n  episode: [Episode]!\n\n  \"\"\"Time at which the character was created in the database.\"\"\"\n  created: String\n}\n\ntype Characters {\n  info: Info\n  results: [Character]\n}\n\ntype Episode {\n  \"\"\"The id of the episode.\"\"\"\n  id: ID\n\n  \"\"\"The name of the episode.\"\"\"\n  name: String\n\n  \"\"\"The air date of the episode.\"\"\"\n  air_date: String\n\n  \"\"\"The code of the episode.\"\"\"\n  episode: String\n\n  \"\"\"List of characters who have been seen in the episode.\"\"\"\n  characters: [Character]!\n\n  \"\"\"Time at which the episode was created in the database.\"\"\"\n  created: String\n}\n\ntype Episodes {\n  info: Info\n  results: [Episode]\n}\n\ntype Favourite {\n  user_id: String\n  update_date: String\n  character_id: Int\n}\n\ninput FilterCharacter {\n  name: String\n  status: String\n  species: String\n  type: String\n  gender: String\n}\n\ninput FilterEpisode {\n  name: String\n  episode: String\n}\n\ninput FilterLocation {\n  name: String\n  type: String\n  dimension: String\n}\n\ntype Info {\n  \"\"\"The length of the response.\"\"\"\n  count: Int\n\n  \"\"\"The amount of pages.\"\"\"\n  pages: Int\n\n  \"\"\"Number of the next page (if it exists)\"\"\"\n  next: Int\n\n  \"\"\"Number of the previous page (if it exists)\"\"\"\n  prev: Int\n}\n\ntype Location {\n  \"\"\"The id of the location.\"\"\"\n  id: ID\n\n  \"\"\"The name of the location.\"\"\"\n  name: String\n\n  \"\"\"The type of the location.\"\"\"\n  type: String\n\n  \"\"\"The dimension in which the location is located.\"\"\"\n  dimension: String\n\n  \"\"\"List of characters who have been last seen in the location.\"\"\"\n  residents: [Character]!\n\n  \"\"\"Time at which the location was created in the database.\"\"\"\n  created: String\n}\n\ntype Locations {\n  info: Info\n  results: [Location]\n}\n\ntype Mutation {\n  setFavouriteForUser(user_id: String!, character_id: Int!): Favourite\n  register(username: String!, password: String!): Boolean!\n}\n\ntype Query {\n  \"\"\"Get a specific character by ID\"\"\"\n  character(id: ID!): Character\n\n  \"\"\"Get the list of all characters\"\"\"\n  characters(page: Int, filter: FilterCharacter): Characters\n\n  \"\"\"Get a list of characters selected by ids\"\"\"\n  charactersByIds(ids: [ID!]!): [Character]\n\n  \"\"\"Get a specific locations by ID\"\"\"\n  location(id: ID!): Location\n\n  \"\"\"Get the list of all locations\"\"\"\n  locations(page: Int, filter: FilterLocation): Locations\n\n  \"\"\"Get a list of locations selected by ids\"\"\"\n  locationsByIds(ids: [ID!]!): [Location]\n\n  \"\"\"Get a specific episode by ID\"\"\"\n  episode(id: ID!): Episode\n\n  \"\"\"Get the list of all episodes\"\"\"\n  episodes(page: Int, filter: FilterEpisode): Episodes\n\n  \"\"\"Get a list of episodes selected by ids\"\"\"\n  episodesByIds(ids: [ID!]!): [Episode]\n\n  \"\"\"Get favourite record for user_id\"\"\"\n  favouriteById(user_id: String!): Favourite\n  login(username: String!, password: String!): LoginResult!\n  isRegistered(username: String!): Boolean!\n  welcomeMessage: String!\n}\n\n\"\"\"The `Upload` scalar type represents a file upload.\"\"\"\nscalar Upload\n\ntype LoginResult {\n  isLoggedIn: Boolean!\n  jwt: String\n  reason: String\n}\n\ntype User {\n  id: String!\n  pw: String!\n}\n\ntype Subscription {\n  counter: Int!\n}","stringStorage":{"ce32bb5a00e15b692319f90659463b09f51a51b1":"schema {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | INTERFACE | OBJECT\n\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n  \"\"\"Specify the store key.\"\"\"\n  key: String!\n) on FIELD\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"The variable name to export this field as.\"\"\"\n  as: String!\n) on FIELD\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\nenum CacheControlScope {\n  PRIVATE\n  PUBLIC\n}\n\ntype Character {\n  \"\"\"Time at which the character was created in the database.\"\"\"\n  created: String\n  \"\"\"Episodes in which this character appeared.\"\"\"\n  episode: [Episode]!\n  \"\"\"\n  The gender of the character ('Female', 'Male', 'Genderless' or 'unknown').\n  \"\"\"\n  gender: String\n  \"\"\"The id of the character.\"\"\"\n  id: ID\n  \"\"\"\n  Link to the character's image.\n  All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.\n  \"\"\"\n  image: String\n  \"\"\"The character's last known location\"\"\"\n  location: Location\n  \"\"\"The name of the character.\"\"\"\n  name: String\n  \"\"\"The character's origin location\"\"\"\n  origin: Location\n  \"\"\"The species of the character.\"\"\"\n  species: String\n  \"\"\"The status of the character ('Alive', 'Dead' or 'unknown').\"\"\"\n  status: String\n  \"\"\"The type or subspecies of the character.\"\"\"\n  type: String\n}\n\ntype Characters {\n  info: Info\n  results: [Character]\n}\n\ntype Episode {\n  \"\"\"The air date of the episode.\"\"\"\n  air_date: String\n  \"\"\"List of characters who have been seen in the episode.\"\"\"\n  characters: [Character]!\n  \"\"\"Time at which the episode was created in the database.\"\"\"\n  created: String\n  \"\"\"The code of the episode.\"\"\"\n  episode: String\n  \"\"\"The id of the episode.\"\"\"\n  id: ID\n  \"\"\"The name of the episode.\"\"\"\n  name: String\n}\n\ntype Episodes {\n  info: Info\n  results: [Episode]\n}\n\ntype Favourite {\n  character_id: Int\n  update_date: String\n  user_id: String\n}\n\ninput FilterCharacter {\n  gender: String\n  name: String\n  species: String\n  status: String\n  type: String\n}\n\ninput FilterEpisode {\n  episode: String\n  name: String\n}\n\ninput FilterLocation {\n  dimension: String\n  name: String\n  type: String\n}\n\ntype Info {\n  \"\"\"The length of the response.\"\"\"\n  count: Int\n  \"\"\"Number of the next page (if it exists)\"\"\"\n  next: Int\n  \"\"\"The amount of pages.\"\"\"\n  pages: Int\n  \"\"\"Number of the previous page (if it exists)\"\"\"\n  prev: Int\n}\n\ntype Location {\n  \"\"\"Time at which the location was created in the database.\"\"\"\n  created: String\n  \"\"\"The dimension in which the location is located.\"\"\"\n  dimension: String\n  \"\"\"The id of the location.\"\"\"\n  id: ID\n  \"\"\"The name of the location.\"\"\"\n  name: String\n  \"\"\"List of characters who have been last seen in the location.\"\"\"\n  residents: [Character]!\n  \"\"\"The type of the location.\"\"\"\n  type: String\n}\n\ntype Locations {\n  info: Info\n  results: [Location]\n}\n\ntype Mutation {\n  setFavouriteForUser(character_id: Int!, user_id: String!): Favourite\n}\n\ntype Query {\n  \"\"\"Get a specific character by ID\"\"\"\n  character(id: ID!): Character\n  \"\"\"Get the list of all characters\"\"\"\n  characters(filter: FilterCharacter, page: Int): Characters\n  \"\"\"Get a list of characters selected by ids\"\"\"\n  charactersByIds(ids: [ID!]!): [Character]\n  \"\"\"Get a specific episode by ID\"\"\"\n  episode(id: ID!): Episode\n  \"\"\"Get the list of all episodes\"\"\"\n  episodes(filter: FilterEpisode, page: Int): Episodes\n  \"\"\"Get a list of episodes selected by ids\"\"\"\n  episodesByIds(ids: [ID!]!): [Episode]\n  \"\"\"Get favourite record for user_id\"\"\"\n  favouriteById(user_id: String!): Favourite\n  \"\"\"Get a specific locations by ID\"\"\"\n  location(id: ID!): Location\n  \"\"\"Get the list of all locations\"\"\"\n  locations(filter: FilterLocation, page: Int): Locations\n  \"\"\"Get a list of locations selected by ids\"\"\"\n  locationsByIds(ids: [ID!]!): [Location]\n}\n\n\"\"\"The `Upload` scalar type represents a file upload.\"\"\"\nscalar Upload\n\nscalar openfed__FieldSet","1ecf421caf39a03bd5088ed421e1c52fd3f0917e":"schema {\n  query: Query\n  mutation: Mutation\n}\n\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n  \"\"\"Specify the store key.\"\"\"\n  key: String!\n) on FIELD\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"The variable name to export this field as.\"\"\"\n  as: String!\n) on FIELD\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype LoginResult {\n  isLoggedIn: Boolean!\n  jwt: String\n  reason: String\n}\n\ntype Mutation {\n  register(password: String!, username: String!): Boolean!\n}\n\ntype Query {\n  isRegistered(username: String!): Boolean!\n  login(password: String!, username: String!): LoginResult!\n}\n\ntype User {\n  id: String!\n  pw: String!\n}\n\nscalar openfed__FieldSet","5f227616db4bb5cca93b236656c18ff9469c186c":"schema {\n  query: Query\n  subscription: Subscription\n}\n\n\"\"\"\nDirect the client to resolve this field locally, either from the cache or local resolvers.\n\"\"\"\ndirective @client(\n  \"\"\"\n  When true, the client will never use the cache for this value. See\n  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true\n  \"\"\"\n  always: Boolean\n) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT\n\n\"\"\"\nSpecify a custom store key for this result. See\nhttps://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive\n\"\"\"\ndirective @connection(\n  \"\"\"\n  An array of query argument names to include in the generated custom store key.\n  \"\"\"\n  filter: [String!]\n  \"\"\"Specify the store key.\"\"\"\n  key: String!\n) on FIELD\n\n\"\"\"\nExport this locally resolved field as a variable to be used in the remainder of this query. See\nhttps://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables\n\"\"\"\ndirective @export(\n  \"\"\"The variable name to export this field as.\"\"\"\n  as: String!\n) on FIELD\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  welcomeMessage: String!\n}\n\ntype Subscription {\n  counter: Int!\n}\n\nscalar openfed__FieldSet"}},"subgraphs":[{"id":"0","name":"ramapi","routingUrl":"http://ramapi-service.default.svc.cluster.local:8082/graphql"},{"id":"1","name":"ariadne","routingUrl":"http://ariadne-service.default.svc.cluster.local:8083"},{"id":"2","name":"ariadnews","routingUrl":"http://ariadnews-svc.default.svc.cluster.local:8083"}]}